import java.io.*;
import java.util.*;	

public class Kdnn {
	private KDnode rootnode;
	private int d;
	private List<Word> words;

	public Kdnn() {
	    this.rootnode = null;
	    this.words = new ArrayList<>();
	}

	public void buildFromFile(String filename) throws IOException {
	    BufferedReader reader = new BufferedReader(new FileReader(filename));
	    String firstLine = reader.readLine();
	    String[] params = firstLine.split(" ");
	    int numWords = Integer.parseInt(params[0]);
	    this.d = Integer.parseInt(params[1]);
	    
	    // Read all Words
	    for (int i = 0; i < numWords; i++) {
	        String line = reader.readLine();
	        String[] parts = line.split(" ");
	        String w = parts[0];
	        float[] dims = new float[d];
	        
	        for (int j = 0; j < d; j++) {
	            dims[j] = Float.parseFloat(parts[j + 1]);
	        }
	        
	        Word word = new Word(w, dims);
	        words.add(word);
	    }
	    
	    reader.close();
	    
	    rootnode = buildTree(words, 0);
	}

	private KDnode buildTree(List<Word> words, int depth) {
        if (words.isEmpty()) {
            return null;
        }
        
        int axis = depth % d;
        
            // Sort words based on the current axis
       words.sort(new Comparator<Word>() { 
        @Override
         public int compare( Word a, Word b) {
          return Float.compare(a.vec[axis], b.vec[axis]);
           } });

            // Get median of words
        int medianIdx = words.size() / 2;
        Word medianWord = words.get(medianIdx);
        
            // Create nodes and build subtrees
        KDnode node = new KDnode(medianWord, depth);
        node.left = buildTree(words.subList(0, medianIdx), depth + 1);
        node.right = buildTree(words.subList(medianIdx + 1, words.size()), depth + 1);
        
        return node;
    }

	public boolean verifyAllWords() {
        List<Word> numWords = new ArrayList<>();
        collectWords(rootnode, numWords);
        
        if (numWords.size() != words.size()) {
            return false;
        }
        
        // Create a set of words for easier comparison
        Set<String> originalWords = new HashSet<>();
        Set<String> treeWords = new HashSet<>();
        
        for (Word w : words) {
            originalWords.add(w.word);
        }
        
        for (Word w : numWords) {
            treeWords.add(w.word);
        }
        
        return originalWords.equals(treeWords);
    }	

    private void collectWords(KDnode node, List<Word> words) {
        if (node == null) {
            return;
        }
        
        words.add(node.word);
        collectWords(node.left, words);
        collectWords(node.right, words);
    }

    public static void main(String[] args) {
         if (args.length != 1) {
             System.err.println("Usage: cat test.1 | java Kdnn dat.1");
             System.exit(1);
         }
         
         try {
             Kdnn kdTree = new Kdnn();
             kdTree.buildFromFile(args[0]);
             
             // Verify that all Words are in the tree
             boolean verified = kdTree.verifyAllWords();
             System.out.println("Tree verification " + (verified ? "successful" : "failed"));
             System.out.println("All Words are " + (verified ? "" : "not ") + "present in the tree");
             
         } catch (IOException e) {
             System.err.println("Error reading file: " + e.getMessage());
             System.exit(1);
         }
     }
}
